{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toItemArray = toItemArray;\nexports.chunk = chunk;\nexports.groupBySortedKeys = groupBySortedKeys;\nexports.has = exports.makeArray = void 0;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\n\n\nfunction toItemArray(a) {\n  if (Array.isArray(a)) return a;\n  return [];\n}\n\nconst makeArray = (obj, excludeNull = true) => {\n  const result = [];\n  return excludeNull ? obj == null ? result : result.concat(obj) : result.concat(obj);\n};\n\nexports.makeArray = makeArray;\n\nconst has = (o, key) => o ? Object.prototype.hasOwnProperty.call(o, key) : false;\n\nexports.has = has;\n\nfunction chunk(array, chunkSize) {\n  let index = 0;\n  let length = array ? array.length : 0;\n  let result = [];\n  chunkSize = Math.max(+chunkSize || 1, 1);\n\n  while (index < length) result.push(array.slice(index, index += chunkSize));\n\n  return result;\n}\n\nfunction groupBySortedKeys(groupBy, data, _keys = []) {\n  const iter = typeof groupBy === 'function' ? groupBy : item => item[groupBy];\n  (0, _warning.default)(typeof groupBy !== 'string' || !data.length || has(data[0], groupBy), `[React Widgets] You seem to be trying to group this list by a ` + `property \\`${groupBy}\\` that doesn't exist in the dataset items, this may be a typo`);\n  const groups = new Map();\n  data.forEach(item => {\n    let group = iter(item);\n    if (groups.has(group)) groups.get(group).push(item);else groups.set(group, [item]);\n  });\n  return Array.from(groups);\n}","map":{"version":3,"sources":["D:/workspace2021/projectmanagement/client/node_modules/react-widgets/lib/_.js"],"names":["Object","defineProperty","exports","value","toItemArray","chunk","groupBySortedKeys","has","makeArray","_warning","_interopRequireDefault","require","obj","__esModule","default","a","Array","isArray","excludeNull","result","concat","o","key","prototype","hasOwnProperty","call","array","chunkSize","index","length","Math","max","push","slice","groupBy","data","_keys","iter","item","groups","Map","forEach","group","get","set","from"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toItemArray = toItemArray;\nexports.chunk = chunk;\nexports.groupBySortedKeys = groupBySortedKeys;\nexports.has = exports.makeArray = void 0;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nfunction toItemArray(a) {\n  if (Array.isArray(a)) return a;\n  return [];\n}\n\nconst makeArray = (obj, excludeNull = true) => {\n  const result = [];\n  return excludeNull ? obj == null ? result : result.concat(obj) : result.concat(obj);\n};\n\nexports.makeArray = makeArray;\n\nconst has = (o, key) => o ? Object.prototype.hasOwnProperty.call(o, key) : false;\n\nexports.has = has;\n\nfunction chunk(array, chunkSize) {\n  let index = 0;\n  let length = array ? array.length : 0;\n  let result = [];\n  chunkSize = Math.max(+chunkSize || 1, 1);\n\n  while (index < length) result.push(array.slice(index, index += chunkSize));\n\n  return result;\n}\n\nfunction groupBySortedKeys(groupBy, data, _keys = []) {\n  const iter = typeof groupBy === 'function' ? groupBy : item => item[groupBy];\n  (0, _warning.default)(typeof groupBy !== 'string' || !data.length || has(data[0], groupBy), `[React Widgets] You seem to be trying to group this list by a ` + `property \\`${groupBy}\\` that doesn't exist in the dataset items, this may be a typo`);\n  const groups = new Map();\n  data.forEach(item => {\n    let group = iter(item);\n    if (groups.has(group)) groups.get(group).push(item);else groups.set(group, [item]);\n  });\n  return Array.from(groups);\n}"]},"metadata":{},"sourceType":"script"}